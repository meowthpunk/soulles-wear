import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.web_app_info import WebAppInfo
from aiogram.types import MenuButton
from app import create_customer, query_news, customer_set_news, get_id

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="5388724168:AAGck_2xlwnIr4ZH9GyQLsfwEBDS4NBKL1k", parse_mode=types.ParseMode.HTML)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message_handler(commands="test1")
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")
# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
async def cmd_test2(message: types.Message):
    await message.reply("Test 2")

# CHANNEL_ID = '129681560'


@dp.message_handler(commands="inline_url")
async def send_message(message: types.Message):
    query_news()
    channels = query_news()
    reply_text = '–û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?'
    news_text = '–í–æ—Ç —Ç–∞–∫–∏–µ –µ–±–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ—à–µ–ª —è –Ω–∞—Ö—É–π —Ç–æ—Å–∏ –±–æ—Å–∏, —Ö—É–π –Ω–∞ —Ç—Ä–æ—Å—Å–µ. –ü–û–ö–ê!'
    # for channel in range(len(channels)):
    print('pizdec')
    for nonetype in range(len(channels[0])):
        await bot.send_message(channels[0][nonetype], news_text)
        await bot.send_message(channels[0][nonetype], reply_text, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="‚ùé", callback_data="reject_news"), InlineKeyboardButton(text="‚úÖ", callback_data="accept_news")))
        customer_set_news(get_id(channels[0][nonetype]), True)

    for truetype in range(len(channels[1])):
        await bot.send_message(channels[1][truetype], news_text)

dp.register_message_handler(send_message, commands="test2")


@dp.message_handler(commands="inline_url")
async def set_none(message: types.Message):
    customer_set_news(5, None)
    customer_set_news(6, None)
    print('Gatova')

dp.register_message_handler(set_none, commands="test3")

@dp.callback_query_handler(text='accept_news')
async def aaa_call(callback: types.CallbackQuery):

    customer_set_news(get_id(callback.from_user.id), True)
    await callback.message.answer('–ö–∞–π—Ñ')
    await callback.message.delete()


@dp.callback_query_handler(text='reject_news')
async def aaa_call(callback: types.CallbackQuery):
    customer_set_news(get_id(callback.from_user.id), False)
    await callback.message.answer('–ø–æ—Ö—É–π –ø—Ä–æ–µ–±–∞–ª–∏')
    await callback.message.delete()


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.answer("Let's start!üòÄ", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="Order food", web_app = WebAppInfo(url="https://flask-test-bot-back.herokuapp.com/"))))
    menu_button = MenuButton()
    print(message.from_user.id)
    # print(menu_button)
    create_customer(message.from_user.id)
    print(message.from_user)
    pizda()

@dp.message_handler()
async def pizda():
    await bot.send_message(1066007752, '444')

# on_startup(print('pizda'))
executor.start_polling(dp, skip_updates=True)
